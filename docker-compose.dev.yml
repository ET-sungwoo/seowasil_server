# docker-compose -f docker-compose.dev.yml up -d
# 내 Desktop으로 테스트
# production
# 나중에 다시 손 봐야함 (https://github.com/boostcampwm-2022/web13-moyeomoyeo/blob/develop/backend/docker-compose.prod.yml)

# docker-compose -f docker-compose.dev.yml up -d
version: '3.8'
services:
  seowasil-nginx:
    container_name: seowasil-nginx
    image: nginx
    restart: always # 컨테이너가 종료되면 항상 다시 시작
    volumes:
      - ./nginx/dev:/etc/nginx/conf.d
      - /letsencrypt/certbot/conf:/etc/letsencrypt
      - /letsencrypt/certbot/www:/var/www/certbot
    ports:
      - 80:80 # 호스트의 80 포트를 컨테이너의 80 포트로 매핑
      - 443:443
    depends_on:
      - seowasil-server # seowasil-server 서비스가 준비되어야 함
    networks:
      - backbone # 컨테이너 간 통신을 위한 네트워크 설정
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"''' # Nginx 실행 명령 및 설정

  db:
    container_name: seowasil-db-dev
    image: postgres
    restart: always # 컨테이너가 종료되면 항상 다시 시작
    ports:
      - 5432:5432
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: ${USERNAME}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_DB: ${DATABASE}
    volumes:
      - ./db:/var/lib/postgresql/data # 호스트의 ./db 디렉토리를 컨테이너의 /var/lib/postgresql/data에 마운트
    networks:
      - backbone # 컨테이너 간 통신을 위한 네트워크 설정

  seowasil-server:
    container_name: seowasil-server
    build:
      context: . # Dockerfile이 위치한 디렉토리
      dockerfile: Dockerfile # 서버를 위한 Dockerfile을 사용
    environment:
      NODE_ENV: production # 개발 환경으로 설정
    ports:
      - 8000:8000 # 호스트의 5432 포트를 컨테이너의 5432 포트로 매핑
    command: # 컨테이너 시작 시 실행할 명령어
      - npm run build
      - npm run start
    networks:
      - backbone # 컨테이너 간 통신을 위한 네트워크 설정

networks:
  backbone:
    name: backbone # 네트워크의 이름을 'backbone'으로 설정
    driver: bridge # 사용할 네트워크 드라이버를 'bridge'로 설정
